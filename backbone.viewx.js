// Generated by CoffeeScript 1.6.2
var $, View, contains, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ref = require('backbone'), View = _ref.View, $ = _ref.$;

contains = function(doc, el) {
  return (doc.contains || $.contains)(doc, el);
};

exports.View = (function(_super) {
  __extends(View, _super);

  function View() {
    this.viewsByCid = {};
    View.__super__.constructor.apply(this, arguments);
  }

  View.prototype.view = function(view) {
    this.viewsByCid[view.cid] = view;
    return view;
  };

  View.prototype.removeViews = function() {
    var cid, view, _ref1;

    _ref1 = this.viewsByCid;
    for (cid in _ref1) {
      view = _ref1[cid];
      this.viewsByCid[cid] = void 0;
      view.remove();
    }
    return this;
  };

  View.prototype.remove = function() {
    View.__super__.remove.apply(this, arguments);
    this.removeViews();
    return this;
  };

  View.prototype.prependTo = function(el) {
    $(el.el || el).prepend(this.el);
    if (contains(this.el.ownerDocument.body, this.el)) {
      this.callOnEnterDOM();
    }
    return this;
  };

  View.prototype.appendTo = function(el) {
    $(el.el || el).append(this.el);
    if (contains(this.el.ownerDocument.body, this.el)) {
      this.callOnEnterDOM();
    }
    return this;
  };

  View.prototype.appendAfter = function(el) {
    $(el.el || el).after(this.el);
    if (contains(this.el.ownerDocument.body, this.el)) {
      this.callOnEnterDOM();
    }
    return this;
  };

  View.prototype.appendBefore = function(el) {
    $(el.el || el).before(this.el);
    if (contains(this.el.ownerDocument.body, this.el)) {
      this.callOnEnterDOM();
    }
    return this;
  };

  View.prototype.prepend = function(el) {
    if (el.el != null) {
      return el.prependTo(this);
    } else {
      return this.$el.prepend(el);
    }
  };

  View.prototype.append = function(el) {
    if (el.el != null) {
      return el.appendTo(this);
    } else {
      return this.$el.append(el);
    }
  };

  View.prototype.after = function(el) {
    if (el.el != null) {
      return el.appendAfter(this);
    } else {
      return this.$el.after(el);
    }
  };

  View.prototype.before = function(el) {
    if (el.el != null) {
      return el.appendBefore(this);
    } else {
      return this.$el.before(el);
    }
  };

  View.prototype.callOnEnterDOM = function() {
    var view, _, _ref1, _results;

    if (typeof this.onEnterDOM === "function") {
      this.onEnterDOM();
    }
    if (this.viewsByCid != null) {
      _ref1 = this.viewsByCid;
      _results = [];
      for (_ in _ref1) {
        view = _ref1[_];
        _results.push(typeof view.callOnEnterDOM === "function" ? view.callOnEnterDOM() : void 0);
      }
      return _results;
    }
  };

  return View;

})(View);

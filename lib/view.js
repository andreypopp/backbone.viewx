// Generated by CoffeeScript 1.6.2
var $, View, contains, extend, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

extend = require('underscore').extend;

_ref = require('backbone'), View = _ref.View, $ = _ref.$;

contains = function(doc, el) {
  if (doc.contains != null) {
    return doc.contains(el);
  } else {
    return $.contains(doc, el);
  }
};

exports.DOMInsertionMethods = {
  prependTo: function(el) {
    $(el.el || el).prepend(this.el);
    if (contains(this.el.ownerDocument.body, this.el)) {
      this.callOnEnterDOM();
    }
    return this;
  },
  appendTo: function(el) {
    $(el.el || el).append(this.el);
    if (contains(this.el.ownerDocument.body, this.el)) {
      this.callOnEnterDOM();
    }
    return this;
  },
  appendAfter: function(el) {
    $(el.el || el).after(this.el);
    if (contains(this.el.ownerDocument.body, this.el)) {
      this.callOnEnterDOM();
    }
    return this;
  },
  appendBefore: function(el) {
    $(el.el || el).before(this.el);
    if (contains(this.el.ownerDocument.body, this.el)) {
      this.callOnEnterDOM();
    }
    return this;
  },
  prepend: function(el) {
    if (el.el != null) {
      el.prependTo(this);
    } else {
      this.$el.prepend(el);
    }
    return this;
  },
  append: function(el) {
    if (el.el != null) {
      el.appendTo(this);
    } else {
      this.$el.append(el);
    }
    return this;
  },
  after: function(el) {
    if (el.el != null) {
      el.appendAfter(this);
    } else {
      this.$el.after(el);
    }
    return this;
  },
  before: function(el) {
    if (el.el != null) {
      el.appendBefore(this);
    } else {
      this.$el.before(el);
    }
    return this;
  },
  callOnEnterDOM: function() {
    var view, _, _ref1, _results;

    if (typeof this.onEnterDOM === "function") {
      this.onEnterDOM();
    }
    if (this.viewsByCid != null) {
      _ref1 = this.viewsByCid;
      _results = [];
      for (_ in _ref1) {
        view = _ref1[_];
        _results.push(typeof view.callOnEnterDOM === "function" ? view.callOnEnterDOM() : void 0);
      }
      return _results;
    }
  }
};

exports.View = (function(_super) {
  __extends(View, _super);

  extend(View.prototype, exports.DOMInsertionMethods);

  function View() {
    this.viewsByCid = {};
    View.__super__.constructor.apply(this, arguments);
  }

  View.prototype.view = function(view) {
    this.viewsByCid[view.cid] = view;
    return view;
  };

  View.prototype.removeView = function(view) {
    this.viewsByCid[view.cid] = void 0;
    view.remove();
    return this;
  };

  View.prototype.removeViews = function() {
    var view, _, _ref1;

    _ref1 = extend({}, this.viewsByCid);
    for (_ in _ref1) {
      view = _ref1[_];
      this.removeView(view);
    }
    return this;
  };

  View.prototype.remove = function() {
    View.__super__.remove.apply(this, arguments);
    this.removeViews();
    return this;
  };

  return View;

})(View);

// Generated by CoffeeScript 1.6.2
var View,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

View = require('./view').View;

exports.CollectionView = (function(_super) {
  __extends(CollectionView, _super);

  CollectionView.prototype.itemView = void 0;

  CollectionView.prototype.makeItemView = void 0;

  function CollectionView() {
    CollectionView.__super__.constructor.apply(this, arguments);
    this.views = [];
    this.listenTo(this.collection, {
      reset: this.onReset,
      sort: this.onSort,
      add: this.onAdd,
      remove: this.onRemove
    });
  }

  CollectionView.prototype.removeView = function(view) {
    this.viewsByCid[view.cid] = void 0;
    this.views.splice(this.views.indexOf(view), 1);
    view.remove();
    return this;
  };

  CollectionView.prototype.render = function(template) {
    this.setupItemView(template);
    this.onReset();
    return this;
  };

  CollectionView.prototype.setupItemView = function(maybeTemplate) {
    if (this.options.itemView != null) {
      this.itemView = this.options.itemView;
    }
    return this.makeItemView = (function() {
      var _this = this;

      if (this.makeItemView != null) {
        return this.makeItemView;
      } else if (this.itemView != null) {
        return function(model, index) {
          var view;

          view = new _this.itemView({
            model: model
          });
          view = _this.view(view, {
            at: index
          });
          if (_this.options.reverse) {
            if (index != null) {
              _this.views.splice(_this.views.length - index - 1, 0, view);
            } else {
              _this.views.unshift(view);
            }
          } else {
            if (index != null) {
              _this.views.splice(index, 0, view);
            } else {
              _this.views.push(view);
            }
          }
          view.render();
          return view;
        };
      } else {
        throw new Error("provide 'itemView' or 'makeItemView' attribute");
      }
    }).call(this);
  };

  CollectionView.prototype.getItemView = function(model) {
    var idx, view, _i, _len, _ref;

    _ref = this.views;
    for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
      view = _ref[idx];
      if (view.model.cid === model.cid) {
        return view;
      }
    }
  };

  CollectionView.prototype.onReset = function() {
    var _this = this;

    this.trigger('reset:before');
    this.removeViews();
    this.collection.forEach(function(model) {
      if (_this.options.reverse) {
        return _this.makeItemView(model).prependTo(_this.el);
      } else {
        return _this.makeItemView(model).appendTo(_this.el);
      }
    });
    return this.trigger('reset');
  };

  CollectionView.prototype.onSort = function() {
    var $cur,
      _this = this;

    this.trigger('sort:before');
    $cur = void 0;
    this.collection.forEach(function(model, newIdx) {
      var idx, view;

      view = _this.getItemView(model);
      idx = _this.views.indexOf(view);
      _this.views.splice(idx, 1)[0];
      if (_this.options.reverse) {
        _this.views.splice(_this.views.length - newIdx - 1, 0, view);
        if (!$cur) {
          return view.prependTo(_this);
        } else {
          view.before($cur);
          return $cur = view.$el;
        }
      } else {
        _this.views.splice(newIdx, 0, view);
        if (!$cur) {
          return view.appendTo(_this);
        } else {
          view.after($cur);
          return $cur = view.$el;
        }
      }
    });
    return this.trigger('sort');
  };

  CollectionView.prototype.onAdd = function(model) {
    var idx, size, view;

    idx = this.collection.indexOf(model);
    view = this.makeItemView(model, idx);
    this.trigger('add:before', view);
    size = this.$el.children().size();
    if (this.options.reverse) {
      if (idx >= size) {
        view.prependTo(this);
      } else {
        view.appendAfter(this.$el.children().eq(size - idx - 1));
      }
    } else {
      if (idx >= size) {
        view.appendTo(this);
      } else {
        view.appendBefore(this.$el.children().eq(idx));
      }
    }
    return this.trigger('add', view);
  };

  CollectionView.prototype.onRemove = function(model) {
    var view;

    view = this.getItemView(model);
    if (view) {
      this.trigger('remove:before', view);
      this.removeView(view);
      return this.trigger('remove', view);
    }
  };

  return CollectionView;

})(View);
